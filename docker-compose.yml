version: '3.8'

services:
  # Web Application
  web:
    build: .
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://192.168.1.100:3001/api
    depends_on:
      - api
    networks:
      - app-network

  # Mock API Server (for development/demo purposes)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@db:5432/analytics_db
    depends_on:
      - db
    networks:
      - app-network
    volumes:
      - ./api:/app
      - /app/node_modules

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=analytics_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  # Python Forecasting Engine
  forecasting-engine:
    build:
      context: .
      dockerfile: Dockerfile.forecasting
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/analytics_db
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=development
    depends_on:
      - db
      - redis
    networks:
      - app-network
    volumes:
      - ./forecasting:/app
      - /app/__pycache__

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 